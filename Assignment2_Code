# Artwork class representing an artwork in the museum
class Artwork:
    def __init__(self, title, artist, creation_date, significance, location):
        # initialize artwork with its details
        self.title = title
        self.artist = artist
        self.creation_date = creation_date
        self.significance = significance
        self.location = location

    def display_artwork(self):
        # print the artwork details
        print(f"Artwork: {self.title}, Artist: {self.artist}, Year: {self.creation_date}, Location: {self.location}, Significance: {self.significance}")



# Event class
class Event:
    def __init__(self, name, location, start_date, end_date):
        # initialize event with its details
        self.name = name
        self.location = location
        self.start_date = start_date
        self.end_date = end_date
        self.artworks = []  # this will use aggregation relationship

    def add_artwork(self, artwork):
        # add an artwork to the event
        self.artworks.append(artwork)

    def display_event(self):
        # print the event details along with the artworks featured
        print(f"Event: {self.name}, Location: {self.location}, Dates: {self.start_date} to {self.end_date}")
        print("Artworks Featured:")
        for artwork in self.artworks:
            artwork.display_artwork()

# Exhibition class representing a specific type of event, an exhibition
class Exhibition(Event):
    def __init__(self, name, location, start_date, end_date, featured_artworks=[]):
        # initialize exhibition with its details, inheriting from Event
        super().__init__(name, location, start_date, end_date)
        self.featured_artworks = featured_artworks  # this is also aggregation

    def display_exhibition(self):
        # display the exhibition, which is a specific type of event
        super().display_event()


# Visitor class representing a visitor to the museum
class Visitor:
    def __init__(self, name, age, visitor_type):
        # initialize visitor with their details
        self.name = name
        self.age = age
        self.visitor_type = visitor_type
        self.tickets = []  # this will use composition relationship

    def __add__(self, ticket):
        # enable adding a ticket to the visitor, demonstrating composition
        self.purchase_ticket(ticket)
        return self

    def purchase_ticket(self, ticket):
        # purchase a ticket, adding it to the visitor's collection of tickets
        self.tickets.append(ticket)

    def display_purchases(self):
        # print all the tickets purchased by the visitor
        print(f"\nVisitor: {self.name}, Tickets Purchased:")
        for ticket in self.tickets:
            ticket.display_ticket_details()



